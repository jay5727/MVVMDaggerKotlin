apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.jay.mvvmdaggerkotlin"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
//kapt {
//    generateStubs = true
//}
dependencies {
//    def lifecycle_version = "2.0.0"
//    def room_version = "1.1.1"

    // Event Bus - publish/subscribe event bus
    // http://greenrobot.org/eventbus
    implementation 'org.greenrobot:eventbus:3.0.0'

    // Dagger 2 - Dependency injection
    // https://google.github.io/dagger
    implementation "com.google.dagger:dagger:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    implementation 'com.android.support:design:28.0.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Arch Components
    implementation "androidx.room:room-runtime:${versions.room_version}"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"

    kapt "androidx.room:room-compiler:${versions.room_version}"

    // Gson
    implementation "com.google.code.gson:gson:2.8.5"

    // Kotlin Android Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.0"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit_version}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit_version}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    // RxJava & RxAndroid - Reactive Extensions
    // https://github.com/ReactiveX/RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // ViewModel
    //implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    //implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    //kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'

    // New Material Design
    implementation "com.google.android.material:material:1.0.0"


    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle_version}"
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle_version}" // For Kotlin use lifecycle-viewmodel-ktx
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:${versions.lifecycle_version}"
    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:${versions.lifecycle_version}"

    kapt "androidx.lifecycle:lifecycle-compiler:${versions.lifecycle_version}" // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle_version}"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:${versions.lifecycle_version}" // For Kotlin use lifecycle-reactivestreams-ktx

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:${versions.lifecycle_version}"

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-2'

    // Timber
    // https://github.com/JakeWharton/timber
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    // Koin for Android
    compile 'org.koin:koin-android:2.0.1'
    // or Koin for Lifecycle scoping
    compile 'org.koin:koin-android-scope:2.0.1'
    // or Koin for Android Architecture ViewModel
    compile 'org.koin:koin-android-viewmodel:2.0.1'
}
